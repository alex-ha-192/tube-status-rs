name: Deploy

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install platform-specific dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools pkg-config libssl-dev
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install openssl@3
            echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
            echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          binary_name="get_london_underground"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            binpath="target/${{ matrix.target }}/release/${binary_name}.exe"
            mv "$binpath" "$dirname/${binary_name}-${{ env.VERSION }}.exe"
            echo "ASSET=$dirname/${binary_name}-${{ env.VERSION }}.exe" >> $GITHUB_ENV
          else
            binpath="target/${{ matrix.target }}/release/${binary_name}"
            mv "$binpath" "$dirname/${binary_name}-${{ env.VERSION }}"
            echo "ASSET=$dirname/${binary_name}-${{ env.VERSION }}" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET }}